{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Nullish coalescing\n\nℹ️ [MDN : Nullish coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing)\n\n## 기본 사용법 \n\nNullish coalescing (??) 연산자는 왼쪽 피연산자가 _null_ 또는 _undefined_ 경우 오른쪽 피연산자를 반환하고, 그렇지 않으면 왼쪽 피연산자를 반환하는 논리 연산자이다."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const firstName = null ?? 'matthew'\nconsole.log(firstName)\n\nconst serial = 0 ?? 2334\nconsole.log(serial)\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "matthew",
                                "0",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const nullValue = null;\nconst emptyText = \"\"; // falsy\nconst someNumber = 42;\n\nconst valA = nullValue ?? \"default for A\";\nconst valB = emptyText ?? \"default for B\";\nconst valC = someNumber ?? 0;\n\nconsole.log(valA); // \"default for A\"\nconsole.log(valB); // \"\" (as the empty string is not null or undefined)\nconsole.log(valC); // 42"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "default for A",
                                "",
                                "42",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## 연산자 우선순위\n\nNullish coalescing는 ||보다 낮고 조건부 연산자보다 높다. AND (&&)와 OR 연산자 (||)를 ??와 직접 결합하는 것은 불가능므로 () 를 사용한다. (잘 모를때에는 괄호로 묶자) \n\n```js\nnull || undefined ?? \"foo\"; // raises a SyntaxError\n(true && undefined) ?? \"foo\"; \n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## default 값을 변수에 담는 기존의 방법\n\n논리 연산자 '||' 를 사용했다. "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let lastName ;\n\nconst someoneName = lastName || 'Smith'\nconsole.log(someoneName)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Smith",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "아래 예제에서 qty 결과 값이 42인게 맞을까? message 값이 \"\"이 아닌 이유가 뭘까. 자바스크립트에서 0과 \"\"는 논리연산에서 false 로 취급한다. 아래 코드는 때에 따라서는 명백한 오류다. "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const count = 0;\nconst text = \"\";\n\nconst qty = count || 42;\nconst message = text || \"hi!\";\nconsole.log(qty); // 42 and not 0\nconsole.log(message); // \"hi!\" and not \"\""
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "42",
                                "hi!",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Short-curcuiting\n\nand 연산의 경우 첫번째 인자가 false이면 두번째 인자는 검사할 필요가 없다. 이를 short-curcuiting이라고 한다. "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function A() {\n  console.log(\"A was called\");\n  return undefined;\n}\n\nfunction C() {\n  console.log(\"C was called\");\n  return \"foo\";\n}\n\nconsole.log(A() ?? C()); // a() 의 결과가 undefined 이므로 C() 실행해볼 이유가 없다.\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## optional chainging operator (?.)\n\n\"?.\" 연산자는 object내의 property를 체크할 때 아주 유용한 연산자이다. 이것과 조합하면 아래와 같이 활용 가능하다.  \n\nℹ️ [MDN : Optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const foo = { someFooProp: \"hi\" };\n\nconsole.log(foo.someFooProp?.toUpperCase() ?? \"not available\"); // \"HI\"\nconsole.log(foo.someBarProp?.toUpperCase() ?? \"not available\"); // \"not available\" \n// someBarProp 라는 프로퍼티는 존재하지 않는다. undefined"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "HI",
                                "not available",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}