{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Promise.any()\n\nPromise.any() 는 가장 먼저 성공한 promise를 반환한다.  \n\n[Promise.any()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any)\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\n## 문법\n\n```js\nPromise.any(iterable)\n```\n- iterable : Promise 배열 객체이다. \n\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const pErr = new Promise((resolve, reject) => {\n    reject(\"Always fails\");\n  });\n  \n  const pSlow = new Promise((resolve, reject) => {\n    setTimeout(resolve, 500, \"Done eventually\");\n  });\n  \n  const pFast = new Promise((resolve, reject) => {\n    setTimeout(resolve, 100, \"Done quick\");\n  });\n  \n  Promise.any([pErr, pSlow, pFast]).then((value) => {\n    console.log(value);\n    // pFast fulfills first\n  });\n  // Logs:\n  // Done quick"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Done quick",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// 전부다 실패한다면 \nconst failure = new Promise((res, rej) => rej(\"always fail\"))\nconst failure2 = new Promise((res, rej) => rej(\"always fail2\"))\n\nPromise.any([failure, failure2]).catch(err => {\n    console.log(err instanceof AggregateError); // true\n    console.log(err.message)\n    console.log(err.name)\n    console.log(err.errors)\n})\n// AggregateError 가 난다. \n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "[ 'always fail', 'always fail2' ]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Promise.all() 과의 차이점\n\nPromise.all()은 성공한 promise들을 배열로 반환하고, reject이 발생한 경우 실행중인 promise들이 전부 실패하지만, Promise.any() 성공한 것이 하나라도 있으면 가정 먼저 성공된 promise 결과를 리턴한다. "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Promise.race() 와의 차이점\n\nPromise.race() 는 성공실패 상관없이 가장 먼저 실행된 결과를 반환한다. "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const pErr1 = new Promise((resolve, reject) => {\n  reject(\"Always fails\");\n});\n\nconst pSlow1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"Done eventually\");\n});\n\nconst pFast1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"Done quick\");\n});\n\nPromise.race([pErr1, pSlow1, pFast1]).then((value) => {\n    console.log(value);\n  }).catch(err => console.log(err));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Always fails",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}